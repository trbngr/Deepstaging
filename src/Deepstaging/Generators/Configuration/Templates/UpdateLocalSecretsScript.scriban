#!/usr/bin/env bash
set -euo pipefail

# --------------------------
# Setup script paths
# --------------------------
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT={%{ {{- project_name }}}%}
PROJECT_DIR={%{ {{- project_directory }}}%}
LOCAL_SECRETS="${PROJECT_DIR}/secrets.local.yaml"
EXAMPLE_DIR={%{ {{- examples_directory }}}%}

# --------------------------
# Validate local secrets file
# --------------------------
if [[ ! -f "$LOCAL_SECRETS" ]]; then
	echo "Local secrets file not found: $LOCAL_SECRETS"
	echo "creating one from secrets.example.yaml"
	cp "${EXAMPLE_DIR}/secrets.example.yaml" "$LOCAL_SECRETS"	
	echo "Please fill in the secrets in $LOCAL_SECRETS and re-run this script."
	exit 1
fi

# --------------------------
# convert yaml to json
# --------------------------
JSON_CONTENT=$(mktemp)
trap "rm -f '$JSON_CONTENT'" RETURN
yq eval -o=json "$LOCAL_SECRETS" > "$JSON_CONTENT"

echo "Updating secrets for project: $PROJECT"

# Change to the target project directory
cd $PROJECT_DIR

ORIGINAL_SECRETS=$(dotnet user-secrets list)

# Clear and load new secrets
dotnet user-secrets init &>/dev/null
dotnet user-secrets clear
dotnet user-secrets set <"$JSON_CONTENT"

NEW_SECRETS=$(dotnet user-secrets list)

show_diff() {
  local tmp1 tmp2
  tmp1=$(mktemp)
  tmp2=$(mktemp)
  trap "rm -f '$tmp1' '$tmp2'" RETURN

  echo "$ORIGINAL_SECRETS" >"$tmp1"
  echo "$NEW_SECRETS" >"$tmp2"

  git diff --no-index --unified=0 --color --no-prefix "$tmp1" "$tmp2" || true
}

show_diff
