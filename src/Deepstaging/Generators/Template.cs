using System.Diagnostics;
using System.Text;

namespace Deepstaging.Generators;

[DebuggerDisplay("{Name}")]
public sealed record Template(string Name, object? Context = null)
{
    public string Name { get; } = Name;
    public object? Context { get; } = Context;
    public bool RenderHeader { get; init; } = true;

    public string Text => _text.Value;

    public static string RenderTemplate(string name, object? context = null, bool renderHeader = true) =>
        RenderTemplate(new(name, context) { RenderHeader = renderHeader });

    public static string RenderInlineTemplate(string text, object? context = null, bool renderHeader = true)
    {
        text = !renderHeader
            ? text
            : $"""
               // <auto-generated>
               // This file was generated by Deepstaging source generators.
               // Changes to this file may be lost when the code is regenerated.
               // </auto-generated>

               #nullable enable

               {text}
               """;
        
        var parsed = Scriban.Template.Parse(text);
        return parsed.Render(context);
        
    }

    private static string RenderTemplate(Template template)
    {
        var text = !template.RenderHeader
            ? template.Text
            : $"""
               // <auto-generated>
               // This file was generated by Deepstaging source generators.
               // Changes to this file may be lost when the code is regenerated.
               // </auto-generated>

               #nullable enable

               {template.Text}
               """;
        
        var parsed = Scriban.Template.Parse(text);
        return parsed.Render(template.Context);
    }

    public const string TemplatePrefix = "Deepstaging.Generators.";

    private readonly Lazy<string> _text = new(() =>
    {
        var template = $"{TemplatePrefix}{Name}.scriban";

        using var stream = typeof(Template).Assembly.GetManifestResourceStream(template);

        if (stream == null)
            throw new TemplateNotFoundException(template);

        using var reader = new StreamReader(stream);
        return reader.ReadToEnd();
    });
}

public sealed class TemplateNotFoundException(string templateName) : Exception
{
    public override string Message
    {
        get
        {
            var normalizedTemplateName = NormalizeTemplateName(templateName);

            var sb = new StringBuilder()
                .AppendLine()
                .AppendLine($"Template '{normalizedTemplateName}' not found.")
                .AppendLine("\tAvailable templates: ");

            var templateNames = typeof(Template).Assembly.GetManifestResourceNames()
                .Where(x => x.StartsWith(Template.TemplatePrefix))
                .Select(NormalizeTemplateName);

            foreach (var name in templateNames)
                sb.AppendLine($"\t - {name}");

            return sb.ToString();
        }
    }

    private static string NormalizeTemplateName(string templateName)
    {
        templateName = templateName.Substring(Template.TemplatePrefix.Length);
        if (templateName.EndsWith(".scriban"))
            templateName = templateName.Substring(0, templateName.Length - ".scriban".Length);
        return templateName;
    }
}