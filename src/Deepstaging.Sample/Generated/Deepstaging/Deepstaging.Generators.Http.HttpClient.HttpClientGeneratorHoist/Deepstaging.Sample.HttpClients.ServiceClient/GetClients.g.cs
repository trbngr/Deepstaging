// <auto-generated>
// This file was generated by Deepstaging source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

namespace Deepstaging.Sample.HttpClients;

using static Data.Result<global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>>;

public partial interface IServiceClient
{
    global::System.Threading.Tasks.Task<global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>> GetClients(string phoneNumber, CancellationToken token = default);
}

public partial class ServiceClient
{
    // ReSharper disable once UnusedMember.Global
    private partial global::System.Threading.Tasks.Task<global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>> GetClients(string phoneNumber)
        => GetClients(phoneNumber, CancellationToken.None);
        
    public async global::System.Threading.Tasks.Task<global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>> GetClients(string phoneNumber, CancellationToken token = default)
    {
        var request = new GetClients(
            Deserialize: DeserializeJson<global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>>,
            OnError: e => throw e,
            OnSuccess: value => value,
            BodyFactory: (phoneNumber) => new { phoneNumber })
            {                
                Path = "mif-get-clients-by-phone",
                Serialize = SerializeJson,                
                Tags = new()
                {
                    { "phoneNumber", phoneNumber }
                }
            };
            
        request = (GetClients)ConfigureRequest(request); 

        var result = await Post(
            req: new ServiceClientReq<global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>>(request, request.Deserialize),
            body: request.BodyFactory(phoneNumber),
            token: token
        );

        return result switch
        {
            Success s => request.OnSuccess(s.Value),
            Error e => request.OnError(e.Exception!),
            _ => throw new ArgumentOutOfRangeException()
        };
    }
}

public sealed record GetClients(
    Func<global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>, global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>> OnSuccess,
    Func<global::System.Exception, global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>> OnError,
    Func<global::System.Net.Http.HttpResponseMessage, global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>?> Deserialize,
    Func<string, object> BodyFactory) : ServiceClientReq() 
    {
            public GetClients AddTelemetryTag(string key, string value)
            {
                Tags.Add(key, value);
                return this;
            }
            
            public GetClients ClearTelemetryTags()
            {
                Tags.Clear();
                return this;
            }
            
            public GetClients WithPath(string path) => this with {Path = path};            
            public GetClients WithSerializer(Func<object, string> serialize) => this with {Serialize = serialize};
            public GetClients WithDeserializer(Func<global::System.Net.Http.HttpResponseMessage, global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>?> deserialize) => this with {Deserialize = deserialize};
            public GetClients WithOnError(Func<global::System.Exception, global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>> onError) => this with {OnError = onError};
            public GetClients WithOnSuccess(Func<global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>, global::System.Collections.Immutable.ImmutableList<global::Deepstaging.Sample.HttpClients.ClientInfo>> onSuccess) => this with {OnSuccess = onSuccess};
            public GetClients WithBody(Func<string, object> bodyFactory) => this with {BodyFactory = bodyFactory};
    }