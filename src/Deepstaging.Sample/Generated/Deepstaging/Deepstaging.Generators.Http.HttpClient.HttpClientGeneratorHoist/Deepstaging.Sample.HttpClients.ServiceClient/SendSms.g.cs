// <auto-generated>
// This file was generated by Deepstaging source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

namespace Deepstaging.Sample.HttpClients;

using static Data.Result<global::System.Threading.Tasks.Task>;

public partial interface IServiceClient
{
    global::System.Threading.Tasks.Task SendSms(string phoneNumber, string message, CancellationToken token = default);
}

public partial class ServiceClient
{
    // ReSharper disable once UnusedMember.Global
    private partial global::System.Threading.Tasks.Task SendSms(string phoneNumber, string message)
        => SendSms(phoneNumber, message, CancellationToken.None);
        
    public async global::System.Threading.Tasks.Task SendSms(string phoneNumber, string message, CancellationToken token = default)
    {
        var request = new SendSms(
            Deserialize: DeserializeJson<global::System.Threading.Tasks.Task>,
            OnError: e => throw e,
            OnSuccess: () => {},
            BodyFactory: (phoneNumber, message) => new { phoneNumber, message })
            {                
                Path = "messaging-send-sms",
                Serialize = SerializeJson,                
                Tags = new()
                {
                    { "phoneNumber", phoneNumber },
                    { "message", message }
                }
            };
            
        request = (SendSms)ConfigureRequest(request); 

        var result = await Post(
            req: new ServiceClientReq<global::System.Threading.Tasks.Task>(request, request.Deserialize),
            body: request.BodyFactory(phoneNumber, message),
            token: token
        );

        result.MatchError(error: error => request.OnError(error.Exception!), @else: request.OnSuccess);
    }
}

public sealed record SendSms(
    Action OnSuccess,
    Func<global::System.Exception, global::System.Threading.Tasks.Task> OnError,
    Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task?> Deserialize,
    Func<string, string, object> BodyFactory) : ServiceClientReq() 
    {
            public SendSms AddTelemetryTag(string key, string value)
            {
                Tags.Add(key, value);
                return this;
            }
            
            public SendSms ClearTelemetryTags()
            {
                Tags.Clear();
                return this;
            }
            
            public SendSms WithPath(string path) => this with {Path = path};            
            public SendSms WithSerializer(Func<object, string> serialize) => this with {Serialize = serialize};
            public SendSms WithDeserializer(Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task?> deserialize) => this with {Deserialize = deserialize};
            public SendSms WithOnError(Func<global::System.Exception, global::System.Threading.Tasks.Task> onError) => this with {OnError = onError};
            public SendSms WithOnSuccess(Action onSuccess) => this with {OnSuccess = onSuccess};
            public SendSms WithBody(Func<string, string, object> bodyFactory) => this with {BodyFactory = bodyFactory};
    }