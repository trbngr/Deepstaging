// <auto-generated>
// This file was generated by Deepstaging source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

using System.IO;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Schema;
using Microsoft.Extensions.Hosting;
using YamlDotNet.System.Text.Json;

namespace Deepstaging.Configuration;

internal static class ConfigurationSupport
{        
    public const string AppSettingsJsonSchema = """
    {
      "$id": "root",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "Deepstaging": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "Sample": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "HttpClients": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ServiceClientConfig": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "BaseUrl": {
                          "type": "string",
                          "description": "The base url of the service"
                        }
                      },
                      "required": [
                        "BaseUrl"
                      ],
                      "description": "ServiceClientConfig Configuration"
                    }
                  },
                  "required": [
                    "ServiceClientConfig"
                  ]
                }
              },
              "required": [
                "HttpClients"
              ]
            }
          },
          "required": [
            "Sample"
          ]
        }
      },
      "required": [
        "Deepstaging"
      ]
    }
    """;
        
    public const string AppSettingsJsonExample = """
    {
      "Deepstaging": {
        "Sample": {
          "HttpClients": {
            "ServiceClientConfig": {
              "BaseUrl": ""
            }
          }
        }
      }
    }
    """;
        
    public const string SecretsJsonSchema = """
    {
      "$id": "root",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "Deepstaging": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "Sample": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "HttpClients": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "ServiceClientConfig": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "ApiKey": {
                          "type": "string",
                          "description": "The API key for authenticating with the service"
                        }
                      },
                      "required": [
                        "ApiKey"
                      ],
                      "description": "ServiceClientConfig Configuration"
                    }
                  },
                  "required": [
                    "ServiceClientConfig"
                  ]
                }
              },
              "required": [
                "HttpClients"
              ]
            }
          },
          "required": [
            "Sample"
          ]
        }
      },
      "required": [
        "Deepstaging"
      ]
    }
    """;
        
    public const string SecretsJsonExample = """
    {
      "Deepstaging": {
        "Sample": {
          "HttpClients": {
            "ServiceClientConfig": {
              "ApiKey": ""
            }
          }
        }
      }
    }
    """;
    
    public const string UpdateSecretsScriptTemplate = """
    #!/usr/bin/env bash
    set -euo pipefail
    
    # --------------------------
    # Setup script paths
    # --------------------------
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    PROJECT= {{- project_name }}
    PROJECT_DIR= {{- project_directory }}
    LOCAL_SECRETS="${PROJECT_DIR}/secrets.local.yaml"
    EXAMPLE_DIR= {{- examples_directory }}
    
    # --------------------------
    # Validate local secrets file
    # --------------------------
    if [[ ! -f "$LOCAL_SECRETS" ]]; then
    	echo "Local secrets file not found: $LOCAL_SECRETS"
    	echo "creating one from secrets.example.yaml"
    	cp "${EXAMPLE_DIR}/secrets.example.yaml" "$LOCAL_SECRETS"	
    	echo "Please fill in the secrets in $LOCAL_SECRETS and re-run this script."
    	exit 1
    fi
    
    # --------------------------
    # convert yaml to json
    # --------------------------
    JSON_CONTENT=$(mktemp)
    trap "rm -f '$JSON_CONTENT'" RETURN
    yq eval -o=json "$LOCAL_SECRETS" > "$JSON_CONTENT"
    
    echo "Updating secrets for project: $PROJECT"
    
    # Change to the target project directory
    cd $PROJECT_DIR
    
    ORIGINAL_SECRETS=$(dotnet user-secrets list)
    
    # Clear and load new secrets
    dotnet user-secrets init &>/dev/null
    dotnet user-secrets clear
    dotnet user-secrets set <"$JSON_CONTENT"
    
    NEW_SECRETS=$(dotnet user-secrets list)
    
    show_diff() {
      local tmp1 tmp2
      tmp1=$(mktemp)
      tmp2=$(mktemp)
      trap "rm -f '$tmp1' '$tmp2'" RETURN
    
      echo "$ORIGINAL_SECRETS" >"$tmp1"
      echo "$NEW_SECRETS" >"$tmp2"
    
      git diff --no-index --unified=0 --color --no-prefix "$tmp1" "$tmp2" || true
    }
    
    show_diff

    """;
}