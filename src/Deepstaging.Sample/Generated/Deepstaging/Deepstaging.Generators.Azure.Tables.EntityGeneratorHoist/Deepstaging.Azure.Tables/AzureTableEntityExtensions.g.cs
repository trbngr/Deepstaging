// <auto-generated>
// This file was generated by Deepstaging source generators.
// Changes to this file may be lost when the code is regenerated.
// </auto-generated>

#nullable enable

using Azure.Data.Tables;

namespace Deepstaging.Azure.Tables;

internal static class AzureTableEntityExtensions
{
    public static string GetRequiredString(this TableEntity entity, string key) =>
        entity.GetString(key) ?? throw new InvalidOperationException($"{key} is missing");
        
    public static DateTime GetRequiredDateTime(this TableEntity entity, string key) =>
        entity.GetDateTime(key) ?? throw new InvalidOperationException($"{key} is missing");
        
    public static DateTimeOffset GetRequiredDateTimeOffset(this TableEntity entity, string key) =>
        entity.GetDateTimeOffset(key) ?? throw new InvalidOperationException($"{key} is missing");             
                
    public static Guid GetRequiredGuid(this TableEntity entity, string key) =>
        entity.GetGuid(key) ?? throw new InvalidOperationException($"{key} is missing");
        
    public static int GetRequiredInt(this TableEntity entity, string key) =>
        entity.GetInt32(key) ?? throw new InvalidOperationException($"{key} is missing");
        
    public static long GetRequiredLong(this TableEntity entity, string key) =>
        entity.GetInt64(key) ?? throw new InvalidOperationException($"{key} is missing");
        
    public static double GetRequiredDouble(this TableEntity entity, string key) =>
        entity.GetDouble(key) ?? throw new InvalidOperationException($"{key} is missing");
        
    public static bool GetRequiredBoolean(this TableEntity entity, string key) =>
        entity.GetBoolean(key) ?? throw new InvalidOperationException($"{key} is missing");
        
    public static TEnum GetRequiredEnum<TEnum>(this TableEntity entity, string key) where TEnum : struct, Enum
    {
        var value = entity.GetString(key);
        if (value == null || !Enum.TryParse<TEnum>(value, out var result))
            throw new InvalidOperationException($"{key} is missing or invalid");    
        return result;
    }
    
    public static byte[] GetRequiredBinary(this TableEntity entity, string key) =>
        entity.GetBinary(key) ?? throw new InvalidOperationException($"{key} is missing");
}