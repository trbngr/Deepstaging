namespace Deepstaging.SourceGenerators.Generators;

public sealed record Template(string Name, object? Context = null)
{
    public string Name { get; } = Name;
    public object? Context { get; } = Context;

    public string Text => _text.Value;

    public static string RenderTemplate(string name, object? context = null) =>
        RenderTemplate(new(name, context));

    private static string RenderTemplate(Template template)
    {
        var parsed = Scriban.Template.Parse(template.Text);
        return parsed.Render(template.Context);
    }

    private readonly Lazy<string> _text = new(() =>
    {
        var template = $"Deepstaging.SourceGenerators.Generators.{Name}.scriban";

        using var stream = typeof(Template).Assembly.GetManifestResourceStream(template);

        if (stream == null)
            throw new InvalidOperationException($"Template '{template}' not found.");

        using var reader = new StreamReader(stream);
        return $"""
                // <auto-generated>
                // This file was generated by Deepstaging source generators.
                // Changes to this file may be lost when the code is regenerated.
                // </auto-generated>

                #nullable enable

                {reader.ReadToEnd()}
                """;
    });
}